// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import {ObjectMeta} from "../meta/v1";

export namespace getambassador {
    export namespace v1 {
        /**
         * MappingStatus defines the observed state of Mapping
         */
        export interface MappingStatusArgs {
            reason?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

    }

    export namespace v2 {
        /**
         * HostStatus defines the observed state of Host
         */
        export interface HostStatusArgs {
            errorBackoff?: pulumi.Input<string>;
            /**
             * errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
             */
            errorReason?: pulumi.Input<string>;
            errorTimestamp?: pulumi.Input<string>;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phaseCompleted?: pulumi.Input<string>;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phasePending?: pulumi.Input<string>;
            /**
             * The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
             */
            state?: pulumi.Input<string>;
            tlsCertificateSource?: pulumi.Input<string>;
        }

        /**
         * MappingStatus defines the observed state of Mapping
         */
        export interface MappingStatusArgs {
            reason?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

    }

    export namespace v3alpha1 {
        /**
         * AuthServiceSpec defines the desired state of AuthService
         */
        export interface AuthServiceSpecArgs {
            add_auth_headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            add_linkerd_headers?: pulumi.Input<boolean>;
            /**
             * TODO(lukeshu): In v3alpha2, drop allow_request_body in favor of include_body. allow_request_body has been deprecated for a long time.
             */
            allow_request_body?: pulumi.Input<boolean>;
            allowed_authorization_headers?: pulumi.Input<pulumi.Input<string>[]>;
            allowed_request_headers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TODO(lukeshu): In v3alpha2, consider renameing `auth_service` to just `service`, for consistency with the other resource types.
             */
            auth_service: pulumi.Input<string>;
            circuit_breakers?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.AuthServiceSpecCircuit_breakersArgs>[]>;
            failure_mode_allow?: pulumi.Input<boolean>;
            include_body?: pulumi.Input<inputs.getambassador.v3alpha1.AuthServiceSpecInclude_bodyArgs>;
            path_prefix?: pulumi.Input<string>;
            proto?: pulumi.Input<string>;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: pulumi.Input<string>;
            stats_name?: pulumi.Input<string>;
            /**
             * TODO(lukeshu): In v3alpha2, consider getting rid of this struct type in favor of just using an int (i.e. `statusOnError: 500` instead of the current `statusOnError: { code: 500 }`).
             */
            status_on_error?: pulumi.Input<inputs.getambassador.v3alpha1.AuthServiceSpecStatus_on_errorArgs>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            timeout_ms?: pulumi.Input<number>;
            tls?: pulumi.Input<string>;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: pulumi.Input<inputs.getambassador.v3alpha1.AuthServiceSpecV2ExplicitTLSArgs>;
        }

        export interface AuthServiceSpecCircuit_breakersArgs {
            max_connections?: pulumi.Input<number>;
            max_pending_requests?: pulumi.Input<number>;
            max_requests?: pulumi.Input<number>;
            max_retries?: pulumi.Input<number>;
            priority?: pulumi.Input<string>;
        }

        export interface AuthServiceSpecInclude_bodyArgs {
            allow_partial: pulumi.Input<boolean>;
            /**
             * These aren't pointer types because they are required.
             */
            max_bytes: pulumi.Input<number>;
        }

        /**
         * TODO(lukeshu): In v3alpha2, consider getting rid of this struct type in favor of just using an int (i.e. `statusOnError: 500` instead of the current `statusOnError: { code: 500 }`).
         */
        export interface AuthServiceSpecStatus_on_errorArgs {
            code?: pulumi.Input<number>;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface AuthServiceSpecV2ExplicitTLSArgs {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: pulumi.Input<string>;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *   | Value        | Representation                        | Meaning of representation          |  |--------------+---------------------------------------+------------------------------------|  | ""           | omit the field                        | defer to service (no TLSContext)   |  | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   |  | "string"     | store an empty string in the field    | defer to service (no TLSContext)   |  | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   |  | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: pulumi.Input<string>;
        }

        /**
         * ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
         */
        export interface ConsulResolverSpecArgs {
            address?: pulumi.Input<string>;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            datacenter?: pulumi.Input<string>;
        }

        /**
         * DevPortalSpec defines the desired state of DevPortal
         */
        export interface DevPortalSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Content specifies where the content shown in the DevPortal come from
             */
            content?: pulumi.Input<inputs.getambassador.v3alpha1.DevPortalSpecContentArgs>;
            /**
             * Default must be true when this is the default DevPortal
             */
            default?: pulumi.Input<boolean>;
            /**
             * Docs is a static docs definition
             */
            docs?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.DevPortalSpecDocsArgs>[]>;
            /**
             * Describes how to display "services" in the DevPortal. Default namespace.name
             */
            naming_scheme?: pulumi.Input<string>;
            /**
             * Configures this DevPortal to use server definitions from the openAPI doc instead of rewriting them based on the url used for the connection.
             */
            preserve_servers?: pulumi.Input<boolean>;
            /**
             * DevPortalSearchSpec allows configuration over search functionality for the DevPortal
             */
            search?: pulumi.Input<inputs.getambassador.v3alpha1.DevPortalSpecSearchArgs>;
            /**
             * Selector is used for choosing what is shown in the DevPortal
             */
            selector?: pulumi.Input<inputs.getambassador.v3alpha1.DevPortalSpecSelectorArgs>;
        }

        /**
         * Content specifies where the content shown in the DevPortal come from
         */
        export interface DevPortalSpecContentArgs {
            branch?: pulumi.Input<string>;
            dir?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * DevPortalDocsSpec is a static documentation definition: instead of using a Selector for finding documentation for services, users can provide a static list of <service>:<URL> tuples. These services will be shown in the Dev Portal with the documentation obtained from this URL.
         */
        export interface DevPortalSpecDocsArgs {
            /**
             * Service is the service being documented
             */
            service?: pulumi.Input<string>;
            /**
             * Timeout specifies the amount of time devportal will wait for the downstream service to report an openapi spec back
             */
            timeout_ms?: pulumi.Input<number>;
            /**
             * URL is the URL used for obtaining docs
             */
            url?: pulumi.Input<string>;
        }

        /**
         * DevPortalSearchSpec allows configuration over search functionality for the DevPortal
         */
        export interface DevPortalSpecSearchArgs {
            enabled?: pulumi.Input<boolean>;
            /**
             * Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Selector is used for choosing what is shown in the DevPortal
         */
        export interface DevPortalSpecSelectorArgs {
            /**
             * MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * MatchNamespaces is a list of namespaces that will be included in this DevPortal.
             */
            matchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HostSpec defines the desired state of Host
         */
        export interface HostSpecArgs {
            /**
             * Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
             */
            acmeProvider?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecAcmeProviderArgs>;
            /**
             * Common to all Ambassador objects (and optional).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hostname by which the Ambassador can be reached.
             */
            hostname?: pulumi.Input<string>;
            /**
             * Selector for Mappings we'll associate with this Host. At the moment, Selector and MappingSelector are synonyms, but that will change soon.
             */
            mappingSelector?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecMappingSelectorArgs>;
            /**
             * Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
             */
            previewUrl?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecPreviewUrlArgs>;
            /**
             * Request policy definition.
             */
            requestPolicy?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecRequestPolicyArgs>;
            /**
             * DEPRECATED: Selector by which we can find further configuration. Use MappingSelector instead. 
             *  TODO(lukeshu): In v3alpha2, figure out how to get rid of HostSpec.DeprecatedSelector.
             */
            selector?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecSelectorArgs>;
            /**
             * TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
             */
            tls?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecTlsArgs>;
            /**
             * Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`. 
             *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
             */
            tlsContext?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecTlsContextArgs>;
            /**
             * Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
             */
            tlsSecret?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecTlsSecretArgs>;
        }

        /**
         * Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
         */
        export interface HostSpecAcmeProviderArgs {
            /**
             * Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
             */
            authority?: pulumi.Input<string>;
            email?: pulumi.Input<string>;
            /**
             * Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account. 
             *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
             */
            privateKeySecret?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecAcmeProviderPrivateKeySecretArgs>;
            /**
             * This is normally set automatically
             */
            registration?: pulumi.Input<string>;
        }

        /**
         * Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account. 
         *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
         */
        export interface HostSpecAcmeProviderPrivateKeySecretArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Selector for Mappings we'll associate with this Host. At the moment, Selector and MappingSelector are synonyms, but that will change soon.
         */
        export interface HostSpecMappingSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.HostSpecMappingSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface HostSpecMappingSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
         */
        export interface HostSpecPreviewUrlArgs {
            /**
             * Is the Preview URL feature enabled?
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * What type of Preview URL is allowed?
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Request policy definition.
         */
        export interface HostSpecRequestPolicyArgs {
            insecure?: pulumi.Input<inputs.getambassador.v3alpha1.HostSpecRequestPolicyInsecureArgs>;
        }

        export interface HostSpecRequestPolicyInsecureArgs {
            action?: pulumi.Input<string>;
            additionalPort?: pulumi.Input<number>;
        }

        /**
         * DEPRECATED: Selector by which we can find further configuration. Use MappingSelector instead. 
         *  TODO(lukeshu): In v3alpha2, figure out how to get rid of HostSpec.DeprecatedSelector.
         */
        export interface HostSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.HostSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface HostSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
         */
        export interface HostSpecTlsArgs {
            alpn_protocols?: pulumi.Input<string>;
            ca_secret?: pulumi.Input<string>;
            cacert_chain_file?: pulumi.Input<string>;
            cert_chain_file?: pulumi.Input<string>;
            cert_required?: pulumi.Input<boolean>;
            cipher_suites?: pulumi.Input<pulumi.Input<string>[]>;
            crl_secret?: pulumi.Input<string>;
            ecdh_curves?: pulumi.Input<pulumi.Input<string>[]>;
            max_tls_version?: pulumi.Input<string>;
            min_tls_version?: pulumi.Input<string>;
            private_key_file?: pulumi.Input<string>;
            redirect_cleartext_from?: pulumi.Input<number>;
            sni?: pulumi.Input<string>;
        }

        /**
         * Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`. 
         *  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
         */
        export interface HostSpecTlsContextArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
         */
        export interface HostSpecTlsSecretArgs {
            /**
             * Name is unique within a namespace to reference a secret resource.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which the secret name must be unique.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * HostStatus defines the observed state of Host
         */
        export interface HostStatusArgs {
            errorBackoff?: pulumi.Input<string>;
            /**
             * errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
             */
            errorReason?: pulumi.Input<string>;
            errorTimestamp?: pulumi.Input<string>;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phaseCompleted?: pulumi.Input<string>;
            /**
             * phaseCompleted and phasePending are valid when state==Pending or state==Error.
             */
            phasePending?: pulumi.Input<string>;
            /**
             * The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
             */
            state?: pulumi.Input<string>;
            tlsCertificateSource?: pulumi.Input<string>;
        }

        /**
         * KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
         */
        export interface KubernetesEndpointResolverSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
         */
        export interface KubernetesServiceResolverSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ListenerSpec defines the desired state of this Port
         */
        export interface ListenerSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * HostBinding allows restricting which Hosts will be used for this Listener.
             */
            hostBinding: pulumi.Input<inputs.getambassador.v3alpha1.ListenerSpecHostBindingArgs>;
            /**
             * L7Depth specifies how many layer 7 load balancers are between us and the edge of the network.
             */
            l7Depth?: pulumi.Input<number>;
            /**
             * Port is the network port. Only one Listener can use a given port.
             */
            port: pulumi.Input<number>;
            /**
             * Protocol is a shorthand for certain predefined stacks. Exactly one of Protocol or ProtocolStack must be supplied.
             */
            protocol?: pulumi.Input<string>;
            /**
             * ProtocolStack explicitly specifies the protocol stack to set up. Exactly one of Protocol or ProtocolStack must be supplied.
             */
            protocolStack?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecurityModel specifies how to determine whether connections to this port are secure or insecure.
             */
            securityModel: pulumi.Input<string>;
            /**
             * StatsPrefix specifies the prefix for statistics sent by Envoy about this Listener. The default depends on the protocol: "ingress-http", "ingress-https", "ingress-tls-$port", or "ingress-$port".
             */
            statsPrefix?: pulumi.Input<string>;
        }

        /**
         * HostBinding allows restricting which Hosts will be used for this Listener.
         */
        export interface ListenerSpecHostBindingArgs {
            /**
             * NamespaceBindingType defines we we specify which namespaces to look for Hosts in.
             */
            namespace?: pulumi.Input<inputs.getambassador.v3alpha1.ListenerSpecHostBindingNamespaceArgs>;
            /**
             * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.getambassador.v3alpha1.ListenerSpecHostBindingSelectorArgs>;
        }

        /**
         * NamespaceBindingType defines we we specify which namespaces to look for Hosts in.
         */
        export interface ListenerSpecHostBindingNamespaceArgs {
            /**
             * NamespaceFromType defines how we evaluate a NamespaceBindingType.
             */
            from?: pulumi.Input<string>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ListenerSpecHostBindingSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.ListenerSpecHostBindingSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ListenerSpecHostBindingSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LogServiceSpec defines the desired state of LogService
         */
        export interface LogServiceSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            driver?: pulumi.Input<string>;
            driver_config?: pulumi.Input<inputs.getambassador.v3alpha1.LogServiceSpecDriver_configArgs>;
            flush_interval_byte_size?: pulumi.Input<number>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}s`/`SecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            flush_interval_time?: pulumi.Input<number>;
            /**
             * TODO(lukeshu): In v3alpha2, drop this LogService.spec.grpc.  Due to sloppy implementation it is required to be present, and required to be 'true'.  It is silly to have a required field with only one valid value, we should just remove the thing.
             */
            grpc?: pulumi.Input<boolean>;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: pulumi.Input<string>;
            service?: pulumi.Input<string>;
            stats_name?: pulumi.Input<string>;
        }

        export interface LogServiceSpecDriver_configArgs {
            additional_log_headers?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.LogServiceSpecDriver_configAdditional_log_headersArgs>[]>;
        }

        export interface LogServiceSpecDriver_configAdditional_log_headersArgs {
            during_request?: pulumi.Input<boolean>;
            during_response?: pulumi.Input<boolean>;
            during_trailer?: pulumi.Input<boolean>;
            header_name?: pulumi.Input<string>;
        }

        /**
         * MappingSpec defines the desired state of Mapping
         */
        export interface MappingSpecArgs {
            add_linkerd_headers?: pulumi.Input<boolean>;
            add_request_headers?: pulumi.Input<{[key: string]: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecAdd_request_headersArgs>}>;
            add_response_headers?: pulumi.Input<{[key: string]: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecAdd_response_headersArgs>}>;
            /**
             * A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings. 
             *  [1]: https://tools.ietf.org/html/rfc7230#section-6.7 
             *  For example, if your upstream service supports WebSockets, you would write 
             *     allow_upgrade:    - websocket 
             *  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write 
             *     allow_upgrade:    - spdy/3.1
             */
            allow_upgrade?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            auth_context_extensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            auto_host_rewrite?: pulumi.Input<boolean>;
            bypass_auth?: pulumi.Input<boolean>;
            /**
             * If true, bypasses any `error_response_overrides` set on the Ambassador module.
             */
            bypass_error_response_overrides?: pulumi.Input<boolean>;
            case_sensitive?: pulumi.Input<boolean>;
            circuit_breakers?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecCircuit_breakersArgs>[]>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            cluster_idle_timeout_ms?: pulumi.Input<number>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            cluster_max_connection_lifetime_ms?: pulumi.Input<number>;
            cluster_tag?: pulumi.Input<string>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            connect_timeout_ms?: pulumi.Input<number>;
            cors?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecCorsArgs>;
            dns_type?: pulumi.Input<string>;
            /**
             * DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
             */
            docs?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecDocsArgs>;
            enable_ipv4?: pulumi.Input<boolean>;
            enable_ipv6?: pulumi.Input<boolean>;
            /**
             * UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
             */
            envoy_override?: pulumi.Input<{[key: string]: any}>;
            /**
             * Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
             */
            error_response_overrides?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecError_response_overridesArgs>[]>;
            grpc?: pulumi.Input<boolean>;
            headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            health_checks?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksArgs>[]>;
            /**
             * Exact match for the hostname of a request if HostRegex is false; regex match for the hostname if HostRegex is true. 
             *  Host specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Host will not associate with a Host that doesn't have a matching Hostname. 
             *  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used. 
             *  DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead. 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.host and MappingSpec.host_regex in favor of a MappingSpec.deprecated_hostname_regex.
             */
            host?: pulumi.Input<string>;
            host_redirect?: pulumi.Input<boolean>;
            /**
             * DEPRECATED: Host is either an exact match or a regex, depending on HostRegex. Use HostName instead. 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.host and MappingSpec.host_regex in favor of a MappingSpec.deprecated_hostname_regex.
             */
            host_regex?: pulumi.Input<boolean>;
            host_rewrite?: pulumi.Input<string>;
            /**
             * Hostname is a DNS glob specifying the hosts to which this Mapping applies. 
             *  Hostname specifies both a match for the ':authority' header of a request, as well as a match criterion for Host CRDs: a Mapping that specifies Hostname will not associate with a Host that doesn't have a matching Hostname. 
             *  If both Host and Hostname are set, an error is logged, Host is ignored, and Hostname is used.
             */
            hostname?: pulumi.Input<string>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            idle_timeout_ms?: pulumi.Input<number>;
            keepalive?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecKeepaliveArgs>;
            /**
             * A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsArgs>[]>}>[]>}>;
            load_balancer?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLoad_balancerArgs>;
            method?: pulumi.Input<string>;
            method_regex?: pulumi.Input<boolean>;
            modules?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            outlier_detection?: pulumi.Input<string>;
            /**
             * Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            path_redirect?: pulumi.Input<string>;
            precedence?: pulumi.Input<number>;
            prefix: pulumi.Input<string>;
            prefix_exact?: pulumi.Input<boolean>;
            /**
             * Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            prefix_redirect?: pulumi.Input<string>;
            prefix_regex?: pulumi.Input<boolean>;
            priority?: pulumi.Input<string>;
            query_parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
             */
            redirect_response_code?: pulumi.Input<number>;
            regex_headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            regex_query_parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
             */
            regex_redirect?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecRegex_redirectArgs>;
            regex_rewrite?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecRegex_rewriteArgs>;
            remove_request_headers?: pulumi.Input<pulumi.Input<string>[]>;
            remove_response_headers?: pulumi.Input<pulumi.Input<string>[]>;
            resolver?: pulumi.Input<string>;
            respect_dns_ttl?: pulumi.Input<boolean>;
            retry_policy?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecRetry_policyArgs>;
            rewrite?: pulumi.Input<string>;
            service: pulumi.Input<string>;
            shadow?: pulumi.Input<boolean>;
            stats_name?: pulumi.Input<string>;
            /**
             * The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
             */
            timeout_ms?: pulumi.Input<number>;
            tls?: pulumi.Input<string>;
            /**
             * use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]` 
             *  TODO(lukeshu): In v3alpha2, get rid of MappingSpec.DeprecatedUseWebsocket.
             */
            use_websocket?: pulumi.Input<boolean>;
            v2BoolHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            v2BoolQueryParameters?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecV2ExplicitTLSArgs>;
            weight?: pulumi.Input<number>;
        }

        export interface MappingSpecAdd_request_headersArgs {
            append?: pulumi.Input<boolean>;
            v2Representation?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface MappingSpecAdd_response_headersArgs {
            append?: pulumi.Input<boolean>;
            v2Representation?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface MappingSpecCircuit_breakersArgs {
            max_connections?: pulumi.Input<number>;
            max_pending_requests?: pulumi.Input<number>;
            max_requests?: pulumi.Input<number>;
            max_retries?: pulumi.Input<number>;
            priority?: pulumi.Input<string>;
        }

        export interface MappingSpecCorsArgs {
            credentials?: pulumi.Input<boolean>;
            exposed_headers?: pulumi.Input<pulumi.Input<string>[]>;
            headers?: pulumi.Input<pulumi.Input<string>[]>;
            max_age?: pulumi.Input<string>;
            methods?: pulumi.Input<pulumi.Input<string>[]>;
            origins?: pulumi.Input<pulumi.Input<string>[]>;
            v2CommaSeparatedOrigins?: pulumi.Input<boolean>;
        }

        /**
         * DocsInfo provides some extra information about the docs for the Mapping. Docs is used by both the agent and the DevPortal.
         */
        export interface MappingSpecDocsArgs {
            display_name?: pulumi.Input<string>;
            ignored?: pulumi.Input<boolean>;
            path?: pulumi.Input<string>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            timeout_ms?: pulumi.Input<number>;
            url?: pulumi.Input<string>;
        }

        /**
         * A response rewrite for an HTTP error response
         */
        export interface MappingSpecError_response_overridesArgs {
            /**
             * The new response body
             */
            body: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecError_response_overridesBodyArgs>;
            /**
             * The status code to match on -- not a pointer because it's required.
             */
            on_status_code: pulumi.Input<number>;
        }

        /**
         * The new response body
         */
        export interface MappingSpecError_response_overridesBodyArgs {
            /**
             * The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
             */
            content_type?: pulumi.Input<string>;
            /**
             * A JSON response with content-type: application/json. The values can contain format text like in text_format.
             */
            json_format?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * A format string representing a text response body. Content-Type can be set using the `content_type` field below.
             */
            text_format?: pulumi.Input<string>;
            /**
             * A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
             */
            text_format_source?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecError_response_overridesBodyText_format_sourceArgs>;
        }

        /**
         * A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
         */
        export interface MappingSpecError_response_overridesBodyText_format_sourceArgs {
            /**
             * The name of a file on the Ambassador pod that contains a format text string.
             */
            filename?: pulumi.Input<string>;
        }

        /**
         * HealthCheck specifies settings for performing active health checking on upstreams
         */
        export interface MappingSpecHealth_checksArgs {
            /**
             * Configuration for where the healthcheck request should be made to
             */
            health_check: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkArgs>;
            /**
             * Number of expected responses for the upstream to be considered healthy. Defaults to 1.
             */
            healthy_threshold?: pulumi.Input<number>;
            /**
             * Interval between health checks. Defaults to every 5 seconds.
             */
            interval?: pulumi.Input<string>;
            /**
             * Timeout for connecting to the health checking endpoint. Defaults to 3 seconds.
             */
            timeout?: pulumi.Input<string>;
            /**
             * Number of non-expected responses for the upstream to be considered unhealthy. A single 503 will mark the upstream as unhealthy regardless of the threshold. Defaults to 2.
             */
            unhealthy_threshold?: pulumi.Input<number>;
        }

        /**
         * Configuration for where the healthcheck request should be made to
         */
        export interface MappingSpecHealth_checksHealth_checkArgs {
            /**
             * HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
             */
            grpc?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkGrpcArgs>;
            /**
             * HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
             */
            http?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttpArgs>;
        }

        /**
         * HealthCheck for gRPC upstreams. Only one of grpc_health_check or http_health_check may be specified
         */
        export interface MappingSpecHealth_checksHealth_checkGrpcArgs {
            /**
             * The value of the :authority header in the gRPC health check request. If left empty the upstream name will be used.
             */
            authority?: pulumi.Input<string>;
            /**
             * The upstream name parameter which will be sent to gRPC service in the health check message
             */
            upstream_name: pulumi.Input<string>;
        }

        /**
         * HealthCheck for HTTP upstreams. Only one of http_health_check or grpc_health_check may be specified
         */
        export interface MappingSpecHealth_checksHealth_checkHttpArgs {
            add_request_headers?: pulumi.Input<{[key: string]: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttpAdd_request_headersArgs>}>;
            expected_statuses?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecHealth_checksHealth_checkHttpExpected_statusesArgs>[]>;
            hostname?: pulumi.Input<string>;
            path: pulumi.Input<string>;
            remove_request_headers?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface MappingSpecHealth_checksHealth_checkHttpAdd_request_headersArgs {
            append?: pulumi.Input<boolean>;
            v2Representation?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * A range of response statuses from Start to End inclusive
         */
        export interface MappingSpecHealth_checksHealth_checkHttpExpected_statusesArgs {
            /**
             * End of the statuses to include. Must be between 100 and 599 (inclusive)
             */
            max: pulumi.Input<number>;
            /**
             * Start of the statuses to include. Must be between 100 and 599 (inclusive)
             */
            min: pulumi.Input<number>;
        }

        export interface MappingSpecKeepaliveArgs {
            idle_time?: pulumi.Input<number>;
            interval?: pulumi.Input<number>;
            probes?: pulumi.Input<number>;
        }

        /**
         * A MappingLabelSpecifier (finally!) defines a single label. 
         *  This mimics envoy/config/route/v3/route_components.proto:RateLimit:Action:action_specifier.
         */
        export interface MappingSpecLabelsArgs {
            /**
             * Sets the label "destination_cluster=«Envoy destination cluster name»".
             */
            destination_cluster?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsDestination_clusterArgs>;
            /**
             * Sets the label "«key»=«value»" (where by default «key» is "generic_key").
             */
            generic_key?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsGeneric_keyArgs>;
            /**
             * Sets the label "remote_address=«IP address of the client»".
             */
            remote_address?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsRemote_addressArgs>;
            /**
             * If the «header_name» header is set, then set the label "«key»=«Value of the «header_name» header»"; otherwise skip applying this label group.
             */
            request_headers?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsRequest_headersArgs>;
            /**
             * Sets the label "source_cluster=«Envoy source cluster name»".
             */
            source_cluster?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLabelsSource_clusterArgs>;
        }

        /**
         * Sets the label "destination_cluster=«Envoy destination cluster name»".
         */
        export interface MappingSpecLabelsDestination_clusterArgs {
            key: pulumi.Input<string>;
        }

        /**
         * Sets the label "«key»=«value»" (where by default «key» is "generic_key").
         */
        export interface MappingSpecLabelsGeneric_keyArgs {
            /**
             * The default is "generic_key".
             */
            key?: pulumi.Input<string>;
            v2Shorthand?: pulumi.Input<boolean>;
            value: pulumi.Input<string>;
        }

        /**
         * Sets the label "remote_address=«IP address of the client»".
         */
        export interface MappingSpecLabelsRemote_addressArgs {
            key: pulumi.Input<string>;
        }

        /**
         * If the «header_name» header is set, then set the label "«key»=«Value of the «header_name» header»"; otherwise skip applying this label group.
         */
        export interface MappingSpecLabelsRequest_headersArgs {
            header_name: pulumi.Input<string>;
            key: pulumi.Input<string>;
            omit_if_not_present?: pulumi.Input<boolean>;
        }

        /**
         * Sets the label "source_cluster=«Envoy source cluster name»".
         */
        export interface MappingSpecLabelsSource_clusterArgs {
            key: pulumi.Input<string>;
        }

        export interface MappingSpecLoad_balancerArgs {
            cookie?: pulumi.Input<inputs.getambassador.v3alpha1.MappingSpecLoad_balancerCookieArgs>;
            header?: pulumi.Input<string>;
            policy: pulumi.Input<string>;
            source_ip?: pulumi.Input<boolean>;
        }

        export interface MappingSpecLoad_balancerCookieArgs {
            name: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            ttl?: pulumi.Input<string>;
        }

        /**
         * Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
         */
        export interface MappingSpecRegex_redirectArgs {
            pattern?: pulumi.Input<string>;
            substitution?: pulumi.Input<string>;
        }

        export interface MappingSpecRegex_rewriteArgs {
            pattern?: pulumi.Input<string>;
            substitution?: pulumi.Input<string>;
        }

        export interface MappingSpecRetry_policyArgs {
            num_retries?: pulumi.Input<number>;
            per_try_timeout?: pulumi.Input<string>;
            retry_on?: pulumi.Input<string>;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface MappingSpecV2ExplicitTLSArgs {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: pulumi.Input<string>;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *   | Value        | Representation                        | Meaning of representation          |  |--------------+---------------------------------------+------------------------------------|  | ""           | omit the field                        | defer to service (no TLSContext)   |  | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   |  | "string"     | store an empty string in the field    | defer to service (no TLSContext)   |  | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   |  | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: pulumi.Input<string>;
        }

        /**
         * MappingStatus defines the observed state of Mapping
         */
        export interface MappingStatusArgs {
            reason?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * TODO(lukeshu): In v3alpha2, get rid of unnecessary nesting and move `ModuleSpec.config.*` to `ModuleSpec.*`.
         */
        export interface ModuleSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TODO(lukeshu): In v3alpha2, change the default from `diagnostics.enabled=true` to `diagnostics.enabled=false`.  This needs conversion support in apiext.  See the related comment in irambassador.py. 
             *  TODO(lukeshu): Structurally type ModuleSpec.Config.
             */
            config: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * RateLimitServiceSpec defines the desired state of RateLimitService
         */
        export interface RateLimitServiceSpecArgs {
            /**
             * Common to all Ambassador objects.
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            domain?: pulumi.Input<string>;
            /**
             * FailureModeDeny when set to true, envoy will deny traffic if it is unable to communicate with the rate limit service.
             */
            failure_mode_deny?: pulumi.Input<boolean>;
            /**
             * ProtocolVersion is the envoy api transport protocol version
             */
            protocol_version?: pulumi.Input<string>;
            service: pulumi.Input<string>;
            stats_name?: pulumi.Input<string>;
            /**
             * TODO(lukeshu): In v3alpha2, change all of the `{foo}_ms`/`MillisecondDuration` fields to `{foo}`/`metav1.Duration`.
             */
            timeout_ms?: pulumi.Input<number>;
            tls?: pulumi.Input<string>;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: pulumi.Input<inputs.getambassador.v3alpha1.RateLimitServiceSpecV2ExplicitTLSArgs>;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface RateLimitServiceSpecV2ExplicitTLSArgs {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: pulumi.Input<string>;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *   | Value        | Representation                        | Meaning of representation          |  |--------------+---------------------------------------+------------------------------------|  | ""           | omit the field                        | defer to service (no TLSContext)   |  | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   |  | "string"     | store an empty string in the field    | defer to service (no TLSContext)   |  | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   |  | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: pulumi.Input<string>;
        }

        /**
         * TCPMappingSpec defines the desired state of TCPMapping
         */
        export interface TCPMappingSpecArgs {
            address?: pulumi.Input<string>;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            circuit_breakers?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.TCPMappingSpecCircuit_breakersArgs>[]>;
            cluster_tag?: pulumi.Input<string>;
            enable_ipv4?: pulumi.Input<boolean>;
            enable_ipv6?: pulumi.Input<boolean>;
            host?: pulumi.Input<string>;
            /**
             * FIXME(lukeshu): Surely this should be an 'int'?
             */
            idle_timeout_ms?: pulumi.Input<string>;
            /**
             * Port isn't a pointer because it's required.
             */
            port: pulumi.Input<number>;
            resolver?: pulumi.Input<string>;
            service: pulumi.Input<string>;
            stats_name?: pulumi.Input<string>;
            tls?: pulumi.Input<string>;
            /**
             * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
             */
            v2ExplicitTLS?: pulumi.Input<inputs.getambassador.v3alpha1.TCPMappingSpecV2ExplicitTLSArgs>;
            weight?: pulumi.Input<number>;
        }

        export interface TCPMappingSpecCircuit_breakersArgs {
            max_connections?: pulumi.Input<number>;
            max_pending_requests?: pulumi.Input<number>;
            max_requests?: pulumi.Input<number>;
            max_retries?: pulumi.Input<number>;
            priority?: pulumi.Input<string>;
        }

        /**
         * V2ExplicitTLS controls some vanity/stylistic elements when converting from v3alpha1 to v2.  The values in an V2ExplicitTLS should not in any way affect the runtime operation of Emissary; except that it may affect internal names in the Envoy config, which may in turn affect stats names.  But it should not affect any end-user observable behavior.
         */
        export interface TCPMappingSpecV2ExplicitTLSArgs {
            /**
             * ServiceScheme specifies how to spell and capitalize the scheme-part of the service URL. 
             *  Acceptable values are "http://" (case-insensitive), "https://" (case-insensitive), or "".  The value is used if it agrees with whether or not this resource enables TLS origination, or if something else in the resource overrides the scheme.
             */
            serviceScheme?: pulumi.Input<string>;
            /**
             * TLS controls whether and how to represent the "tls" field when its value could be implied by the "service" field.  In v2, there were a lot of different ways to spell an "empty" value, and this field specifies which way to spell it (and will therefore only be used if the value will indeed be empty). 
             *   | Value        | Representation                        | Meaning of representation          |  |--------------+---------------------------------------+------------------------------------|  | ""           | omit the field                        | defer to service (no TLSContext)   |  | "null"       | store an explicit "null" in the field | defer to service (no TLSContext)   |  | "string"     | store an empty string in the field    | defer to service (no TLSContext)   |  | "bool:false" | store a Boolean "false" in the field  | defer to service (no TLSContext)   |  | "bool:true"  | store a Boolean "true" in the field   | originate TLS (no TLSContext)      | 
             *  If the meaning of the representation contradicts anything else (if a TLSContext is to be used, or in the case of "bool:true" if TLS is not to be originated), then this field is ignored.
             */
            tls?: pulumi.Input<string>;
        }

        /**
         * TLSContextSpec defines the desired state of TLSContext
         */
        export interface TLSContextSpecArgs {
            alpn_protocols?: pulumi.Input<string>;
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            ca_secret?: pulumi.Input<string>;
            cacert_chain_file?: pulumi.Input<string>;
            cert_chain_file?: pulumi.Input<string>;
            cert_required?: pulumi.Input<boolean>;
            cipher_suites?: pulumi.Input<pulumi.Input<string>[]>;
            crl_secret?: pulumi.Input<string>;
            ecdh_curves?: pulumi.Input<pulumi.Input<string>[]>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            max_tls_version?: pulumi.Input<string>;
            min_tls_version?: pulumi.Input<string>;
            private_key_file?: pulumi.Input<string>;
            redirect_cleartext_from?: pulumi.Input<number>;
            secret?: pulumi.Input<string>;
            secret_namespacing?: pulumi.Input<boolean>;
            sni?: pulumi.Input<string>;
        }

        /**
         * TracingServiceSpec defines the desired state of TracingService
         */
        export interface TracingServiceSpecArgs {
            /**
             * AmbassadorID declares which Ambassador instances should pay attention to this resource. If no value is provided, the default is: 
             *  	ambassador_id: 	- "default" 
             *  TODO(lukeshu): In v3alpha2, consider renaming all of the `ambassador_id` (singular) fields to `ambassador_ids` (plural).
             */
            ambassador_id?: pulumi.Input<pulumi.Input<string>[]>;
            config?: pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecConfigArgs>;
            custom_tags?: pulumi.Input<pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsArgs>[]>;
            driver: pulumi.Input<string>;
            sampling?: pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecSamplingArgs>;
            service: pulumi.Input<string>;
            stats_name?: pulumi.Input<string>;
            /**
             * Deprecated: tag_headers is deprecated. Use custom_tags instead. `tag_headers: ["header"]` can be defined as `custom_tags: [{"request_header": {"name": "header"}}]`.
             */
            tag_headers?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface TracingServiceSpecConfigArgs {
            access_token_file?: pulumi.Input<string>;
            collector_cluster?: pulumi.Input<string>;
            collector_endpoint?: pulumi.Input<string>;
            collector_endpoint_version?: pulumi.Input<string>;
            collector_hostname?: pulumi.Input<string>;
            propagation_modes?: pulumi.Input<pulumi.Input<string>[]>;
            service_name?: pulumi.Input<string>;
            shared_span_context?: pulumi.Input<boolean>;
            trace_id_128bit?: pulumi.Input<boolean>;
        }

        /**
         * TracingCustomTag provides a data structure for capturing envoy's `type.tracing.v3.CustomTag`
         */
        export interface TracingServiceSpecCustom_tagsArgs {
            /**
             * Environment explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            environment?: pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsEnvironmentArgs>;
            /**
             * Literal explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            literal?: pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsLiteralArgs>;
            /**
             * Header explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
             */
            request_header?: pulumi.Input<inputs.getambassador.v3alpha1.TracingServiceSpecCustom_tagsRequest_headerArgs>;
            tag: pulumi.Input<string>;
        }

        /**
         * Environment explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsEnvironmentArgs {
            default_value?: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        /**
         * Literal explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsLiteralArgs {
            value: pulumi.Input<string>;
        }

        /**
         * Header explicitly specifies the protocol stack to set up. Exactly one of Literal, Environment or Header must be supplied.
         */
        export interface TracingServiceSpecCustom_tagsRequest_headerArgs {
            default_value?: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        export interface TracingServiceSpecSamplingArgs {
            client?: pulumi.Input<number>;
            overall?: pulumi.Input<number>;
            random?: pulumi.Input<number>;
        }
    }
}
